;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Generated by Ben Fowler's C- compiler
;; ITB464 Modern Compiler Construction.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.TITLE output
.FILE "output.dcl"

.EXPORT _main

.IMPORT _input
.IMPORT _output

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function declaration for "gcd()"

.PROC _gcd(.NOCHECK,.SIZE=0,.NODISPLAY,.ASSEMBLY=8)
;; Parameter "u"
  .LOCAL _u 8,4 (0,0,0)

;; Parameter "v"
  .LOCAL _v 12,4 (0,0,0)

.ENTRY
;; IF statement
;; if false, jump to else-part
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        pshLit  0
        relEQ
        brFalse label0
;; calculate effective address of variable
;; push parm address
        pshAP   0
        derefW
        popRetW
        exit
        branch label1
label0:
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        mkPar   4,0
;; calculate effective address of variable
;; push parm address
        pshAP   0
        derefW
;; calculate effective address of variable
;; push parm address
        pshAP   0
        derefW
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        div     noTrap
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        mul     noTrap
        sub     noTrap
        mkPar   4,4
        call    _gcd,2
        pshRetW
        popRetW
        exit
label1:
        exit
        endP
.ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function declaration for "main()"

.PROC _main(.NOCHECK,.SIZE=8,.NODISPLAY,.ASSEMBLY=8)
;; Local variable "x"
  .LOCAL _x -4,4 (0,0,0)

;; Local variable "y"
  .LOCAL _y -8,4 (0,0,0)

.ENTRY
;; ** assignment statement*
;; evaluate rvalue as value
        call    _input,0
        pshRetW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
        call    _input,0
        pshRetW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        assignW
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        mkPar   4,0
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        derefW
        mkPar   4,4
        call    _gcd,2
        pshRetW
        mkPar   4,0
        call    _output,1
        exit
        endP
.ENDP

